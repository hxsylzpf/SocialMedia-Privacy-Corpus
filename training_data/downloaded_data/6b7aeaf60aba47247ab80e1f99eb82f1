{
  "content": "Will your next job come from an algorithm? You'll have noticed that among other things you can get here at the Guardian are jobs. But the way that we find jobs is a bit outdated, isn't it? Plug in a CV, hope that someone picks it up; or alternatively, hunt through job ads trying to find something that fits your experience and skills. Wouldn't it be easier - at least in the programming field to begin with - if your job could find you? That's the possibility being held out by a recent post on Hackdiary, in which Matt Biddulph (\"I'm based in Berlin. I'm a software designer and creative technologist. I work at Nokia. I was the CTO of Dopplr, a social network for frequent travellers acquired by Nokia in 2009\") notes that his new job involves recruiting people for new projects in Berlin, which he's only recently moved to. The problem: how do you figure out who the people to recruit for your project are, when you're not familiar with the people in the area but need to get going? Well, one option is to analyse submissions to Github, the open source code repository used by dozens of companies and individual programmers. Biddulph explains: \"When I'm hiring, one of the things I always want to see is evidence of personal projects. Over the last two years, GitHub has become an amazing treasure trove of code, with the best social infrastructure I've ever seen on a developer site. GitHub profiles let the user set their location, so I started with a few web searches for Berlin developers. This finds hundreds of interesting people, but how do I prioritise them?\" Good question. Of course, another question would be \"how do you know if they're any good?\" For that, Biddulph moves to the next step: \"Another thing that I look for when building a good team is someone's personal network. I've always believed strongly in spending lots of time at conferences meeting passionate people who are smarter than me. A good developer can make themselves even more productive by knowing who to email, IM or DM to answer a question when they're stuck.\" From there it's a pretty short hop, skip and JMP to his solution: \"A recent article by Stowe Boyd on centrality and influence in social networks reminded me of some of the network analysis we use behind the scenes calculating recommendations for the Dopplr Social Atlas. So I wrote some code to query the GitHub API and analyse the social graph of the Berlin subset of their users.\" \"The JRuby code uses Yahoo BOSS to do the web search. After querying the GitHub API for each user's followers it builds an in-memory graph using the Java Universal Network/Graph Framework. Then it ranks each user node in the graph using the Betweenness Centrality algorithm.\" And, inevitably, he's put the source code on Github. Your task: see how you would rate against that system. And consider: is the future going to be about doing more in \"social programming\", where what you've contributed becomes key to your hiring? Bonus link: over at Jeff Atwood's Coding Horror blog (Atwood is the co-creator of Stackoverflow.com, where coders often gather...) he's written about \"the non-programming programmer\" - basically, his frustration with people who misrepresent their abilities in interviews. \"\"the vast majority\" of so-called programmers who apply for a programming job interview are unable to write the smallest of programs. To be clear, hard is a relative term -- we're not talking about complicated, Google-style graduate computer science interview problems. This is extremely simple stuff we're asking candidates to do. And they can't. It's the equivalent of attempting to hire a truck driver and finding out that 90 percent of the job applicants can't find the gas pedal or the gear shift.\" Which is why something like Github, where contributions are open and reviewable, are useful. Although you could imagine that the next thing that would happen would be that people would find the most \"linked\" and \"successful\" programmers and copy their code and represent it as theirs on Github or similar. So how do you protect against that? And what do you think of the idea of being hired - or at least selected for your next job interview - by an algorithm?",
  "title": "Will an algorithm pick you for your next coding job?",
  "core-words": null,
  "tags": [
    "technology/technology",
    "money/job-hunting",
    "technology/programming",
    "technology/computing",
    "technology/internet",
    "media/socialnetworking",
    "careers/careers",
    "careers/sectors-industry-roles",
    "careers/media-jobs",
    "careers/application-form"
  ],
  "lead": "The former CTO of Dopplr has hacked together an algorithm to find the best (open source and public) coders in whatever location he's in. A taste of the future?",
  "id": "technology/blog/2010/feb/23/jobs-algorithm-programming-choice",
  "class": null,
  "words": null
}