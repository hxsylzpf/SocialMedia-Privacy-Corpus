{
  "content": "At the end of last week, Apple noted that it was moving towards requiring sandboxing for all apps distributed on the Mac App Store. (Sandboxing? We'll explain.) With Windows 8, Metro apps also requiring sandboxing, it looks like industry players seem to think this will in some way control the malware menace. They're wrong. Here's why. Normal software applications, once installed, usually have free rein over the entire computer and its peripherals. Sandboxing looks to control the rights of installed applications so that they don't automatically have carte blanche over the whole machine. A common example is that sandboxed applications typically cannot write to any folder on disk that they fancy. In the mobile world we've typically always had sandboxing. Apple's move with regards to requiring developers to implement sandboxing with the Mac App Store (MAS) and OS X route implies that its engineers feel it's proven such a good idea on the iPhone and iPad that Mac users might as well \"benefit\" as well. The issue that we developers have is that app store owners can arbitrarily define hoops that we have to jump through in order to get our code up there, but that's not the problem. As we'll see, the real menace to computing, both mobile and desktop, has been that it's all but impossible for vendors to remove \"holes\" in system software, or commonly installed apps, that can be exploited. Here's just one - particularly terrifying - example via Daring Fireball that shows how an app-store-acceptable app can be crafted to download and execute an arbitrary payload that gives total control over the device. If you only watch one YouTube video today, watch this one: Sandboxing and the other measures imposed by the app store owners lulls users into a dangerously false sense of security by implying that apps which run in a sandbox are automatically not malicious - which simply is not true. It also dramatically stifles the industry's ability to innovate on the platform. Criminality It's easy to give a type of software a cutesy name, like \"malware\", but what we're actually talking about here is perpetration of premeditated, criminal acts. Malware authors, like all criminals, are in every case looking to exploit a weakness in a system for gain, usually to some innocent party's loss. In the vast majority of cases, people who have the skills to write things such as viruses, worms, rootkits, keyloggers, or botnets choose not to because they operate morally within the rules of reasonable society. When we examine malware, either on a personal computer at your mum's house or on a server in a FTSE 100 business, the criminal's overarching intent is to co-opt the machine for his (occasionally her) own purposes. Those purposes are either to directly steal from you (e.g. a keylogger that steals your online banking password), or to facilitate some other criminal act (e.g. enlisting your computer in a botnet that sends spam, or finds victims and defrauds them). Thus the ultimate objective of the malware criminal is to find a vector that cedes some or all of the control of your computer to them. You can either cede this control by installing software which has hidden functionality, or you can suffer a \"drive-by download\" (more in a moment). Sandboxing, and other measures favoured by app store owners, looks to \"harden\" vectors related to direct installation. But this sort of vector, where the user explicitly commands the machine to install the malware, is a tiny minority of all attacks. Most malware is installed by a drive-by download. In this scenario the software is installed automatically without their cooperation. Even Mac OS X systems have been vulnerable to drive-by downloads. Drive-by downloads are almost always done through exploit vectors in commonly installed client software. Nowadays, most of these are really off-the-wall, such as getting a seemingly harmless PDF file to run some of the malicious code on the user's machine. Vendors of commonly used software \u2013 particularly Microsoft, but also Apple, Adobe and others \u2013 battle daily to remove the holes that can be exploited by malware authors. Unless a malware author is looking to specifically victimise known individuals through spear phishing, he or she will look to build the biggest network possible, and the drive-by download technique is absolutely the way to do it. Tricking the user into explicitly downloading malware through an app store simply doesn't scale for this sort of broad attack. Let's now look at three particular methods that the app store owners are looking to impose on developers that, in theory, make it harder for the owner to end up distributing malware: permissions/entitlements, code signing and sandboxing. Permissions and entitlements Android has had \"permissions\" from the start. The counterpart in OS X and iOS development is called \"entitlements\". On Android and OS X/iOS these work in roughly the same way - you mark the application with \"I want to use the camera\", or \"I need Internet access\", and so on. (We'll ignore Windows Phone, Windows 8 and .NET for now as what they have in this area is too off-beat.) The user has to confirm that the application they wish to run will have these rights over the device, its peripherals and the network. The problem with this permissions model is that it assumes benign intent on the part of the developer. A photo sharing app could ask to use the camera and the internet - basic functionality that it needs in order to operate legitimately. However, you can take those same permissions and, in theory, take photos without permission and upload them to a server of your choice without the user's cooperation. Android gives us an important view into the efficacy of this permissions-based approach. The Android Market is not curated and applications are not vetted before being made publicly available (they are on the Mac App Store or iTunes App Store). What malware-writing criminals can do on the Android Market is build apps that do whatever they fancy and simply request the permissions they need. Luckily for them, the end user either doesn't care or doesn't understand what these permissions mean, and duly opens up the device by blasting straight through the confirmation screens. And you see that in the amount of malware on the Android Market: it's now the worst platform for malware. But the Android Market is a strange case because it's not curated or vetted (although apps can be removed after the fact both from the Market and from handsets at Google's orders.) Notionally there's no difference between putting up a web page and publishing an app on the Android Market. This is why malware is up there in the first place - it's a soft target. Curated app stores, like the Mac App Store, the iTunes App Store, and the proposed Windows 8 app store won't be attractive to malware criminals. There's too much traceability, plus the store owners will be looking at your software, which is something that you really don't want. A common-sense test tells us why - if you were planning a financial scam, the last thing you'd do is write to the FSA documenting your intended methods. My opinion on this is that permissions/entitlements give the store owners a warm fuzzy feeling that they're doing something, but what they're actually doing is essentially nothing. It's the vetting, or lack of it, that makes the difference there. Code signing The point of code signing is laudable: it guarantees that the software code of an application, when we load it, exactly matches what left the factory. It essentially means that nobody can change the application code when it's in the wild. The certificates used for signing also provide some comfort as to where the software came from. For operating system files, this is an absolute requirement. You need a base to work from that you can guarantee has not been exploited or busted open. Signing operating system files - as proposed by the UEFI secure boot mode in Windows 8 - makes rootkits impossible. But that's where it ends. Code signing has been around since the days of ActiveX, and there are plenty of examples of malware targeting ActiveX installation vectors that are \"appropriately\" signed and proudly displays a company name in the IE security popup. (Here's an example.) This, like permissions/entitlements are damaging because it implies security where there is none. There's nothing special or magical about having a signed app. It doesn't affect the malware problem either way. Sandboxing We've already discussed that sandboxing allows for an application's rights to be limited and why asking the user to confirm those rights via permissions is a largely pointless affair. In the MAS requirements we find things like \"an application can only write to its own private folder\" (and not wherever it fancies writing on the disk). OK, laudable - this means that an application distributed via the Mac App Store cannot find my private documents and transmit them back to Malware HQ. Ignoring the fact that malware authors are not going to use curated app stores, sandboxing doesn't prevent you from building a botnet. From first principles, we know that a botnet just needs to be able to receive commands from a \"command and control\" server and then do some work. If we're sending spam, we need to receive a list of email addresses, build each message in turn and then send them to an SMTP server of our choice. Sandboxing doesn't catch any of that. In fact, neither do fine-grained permissions - all we need there is permission to talk to the internet and we're done. So we're back to a false sense of security. \"It must be OK because it will run in a sandbox.\" No, it just means it could be a class of malware that operates adequately within a sandbox. For reference, the video from Charlie Miller referenced at the top of this article exploits a hole in code signing and runs properly with a sandbox. That's the perfect illustration of the problem: malware is about exploits, not about constraining developers. The sinister problem with sandboxing is that it stifles innovation without offering any real malware protection at all. For me, Apple significantly fails with regards to what a user's data actually means. My data is my data, and I shouldn't have to be reduced to tears by the complexity of getting a Word document onto my iPad. If I have data on one device it should flow effortlessly to all of the other devices that I operate. We have the bandwidth and understanding to do this now - it's a trivial problem. My fear with sandboxing is that it pushes this argument in the wrong direction by further restricting data rather than freeing it up. The strength of the personal computer is that you can take data that you own, then massage and manipulate it using any software that you wish to install. That becomes increasingly difficult when the sandbox is in play. We're not winning this battle Apple's move with imposing sandboxing, and Microsoft's moves with its Windows 8 marketplace to do the same, considers the problem of malware from fundamentally the wrong angle. The only reason why malware is distributed through the Android Market is because it is not policed. To distribute malware you either leverage existing exploits, or you trick people to explicitly install applications without using the app stores. (A now classic example, sadly, is operating a call centre and try and trick people into installing or running your code.) Microsoft, the most experienced company at knowing how to defend against malware exploit vectors, does a good job but is nowhere near a \"zero vector\" point. If Microsoft can't do it, there is absolutely no way that Apple or Google can - they simply do not have the experience, no matter how vocal their fan base. On reflection, the policy of the app store owners seems more about covering their own backs than actually offering a solution. You can legislate all you want for code signing, flagging privileges, or sandboxing - it won't make a blind bit of difference. Malware is a criminal problem and a technical solution won't cut it. This is logical if you consider putting better locks on your house - it doesn't stop society creating people who want to burgle you, it just pushes the problem down to the next guy with less good locks.",
  "title": "Think sandboxing will stop malware? Here's why you're wrong, Apple",
  "core-words": null,
  "tags": [
    "technology/programming",
    "technology/malware",
    "technology/hacking",
    "technology/technology",
    "technology/apple",
    "technology/iphone",
    "technology/microsoft",
    "technology/windows"
  ],
  "lead": "Matthew Baxter-Reynolds: The announcement that Apple will introduce 'sandboxing' for code on Macs, and that Microsoft has similar plans for some Windows 8 apps, doesn't mean the malware problem is going to end",
  "id": "technology/blog/2011/nov/08/sandboxing-malware-failure",
  "class": null,
  "words": null
}