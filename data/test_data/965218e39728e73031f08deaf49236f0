{
  "lead": "Facebook denies it is deliberate loophole but Tobias Boelter sets out what the vulnerability is and why it matters",
  "id": "technology/2017/jan/16/whatsapp-vulnerability-facebook",
  "class": null,
  "title": "WhatsApp vulnerability explained: by the man who discovered it | Tobias Boelter",
  "core-words": {
    "recipient": 1,
    "associate": 1,
    "change": 2,
    "matter": 1,
    "potentially": 1,
    "user": 5,
    "decision": 1,
    "contact": 1,
    "get": 2,
    "message": 10,
    "sender": 3,
    "notify": 2,
    "example": 1,
    "pass": 1,
    "block": 1,
    "design": 1,
    "validate": 1,
    "key": 10,
    "forward": 1,
    "experience": 1,
    "fact": 1,
    "easy": 1,
    "whatsapp": 1,
    "new": 5,
    "central": 1,
    "region": 1,
    "complicated": 1,
    "malicious": 1,
    "secret": 1,
    "party": 1,
    "discretion": 1,
    "automatically": 4,
    "text": 1,
    "downgrade": 1,
    "enable": 1,
    "tick": 1,
    "sure": 1,
    "decide": 1,
    "man": 1,
    "retransmit": 1,
    "possible": 1,
    "click": 1,
    "readable": 1,
    "setting": 1,
    "facebook": 1,
    "deliberate": 1,
    "yes": 1,
    "signal": 1,
    "button": 1,
    "need": 1,
    "phone": 1,
    "store": 1,
    "mark": 1,
    "app": 1,
    "bad": 1,
    "happen": 1,
    "deliver": 1,
    "big": 1,
    "reinstall": 1,
    "number": 1,
    "server": 4,
    "notification": 1,
    "apps": 1,
    "resend": 1,
    "say": 1,
    "vulnerability": 3,
    "receive": 2,
    "download": 1,
    "correctly": 1,
    "allow": 1,
    "make": 1,
    "usability": 1,
    "friend": 3,
    "leave": 1,
    "send": 2,
    "public": 4,
    "look": 1,
    "loophole": 1,
    "accept": 1,
    "option": 1,
    "talk": 1,
    "actual": 1,
    "sound": 1,
    "set": 1,
    "argue": 1,
    "encrypt": 3,
    "discover": 1,
    "deny": 1,
    "long": 1,
    "instead": 1,
    "affect": 1,
    "explain": 1,
    "vulnerable": 1,
    "transit": 3,
    "resent": 1,
    "consider": 1,
    "conversation": 1,
    "increase": 1,
    "belong": 1,
    "thing": 1,
    "give": 1,
    "process": 1,
    "actually": 1
  },
  "words": {
    "dump": 1,
    "information": 2,
    "form": 1,
    "integrity": 1,
    "contest": 1,
    "matter": 1,
    "text": 3,
    "stay": 1,
    "difficult": 2,
    "user": 13,
    "notice": 1,
    "open": 2,
    "app": 3,
    "contact": 3,
    "downgrade": 1,
    "claim": 2,
    "yes": 1,
    "nutshell": 1,
    "go": 3,
    "notify": 2,
    "protocol": 1,
    "example": 2,
    "release": 1,
    "want": 1,
    "launch": 1,
    "case": 1,
    "design": 1,
    "know": 5,
    "hasn't": 2,
    "validate": 1,
    "guarantee": 1,
    "effort": 1,
    "massive": 1,
    "believe": 2,
    "alert": 1,
    "connect": 1,
    "argument": 2,
    "competitor": 1,
    "system": 1,
    "secret": 3,
    "post": 1,
    "think": 1,
    "party": 2,
    "surely": 1,
    "imagine": 1,
    "directly": 1,
    "choose": 2,
    "especially": 1,
    "tick": 2,
    "like": 1,
    "sure": 3,
    "man": 2,
    "attack": 2,
    "behaviour": 2,
    "block": 6,
    "simply": 1,
    "technique": 1,
    "infrastructure": 1,
    "haven't": 1,
    "feature": 2,
    "publish": 1,
    "error": 1,
    "different": 1,
    "base": 1,
    "transmit": 1,
    "receiver": 1,
    "signal": 6,
    "button": 1,
    "leak": 1,
    "inform": 1,
    "ocean": 1,
    "phone": 7,
    "fix": 2,
    "client": 1,
    "mark": 1,
    "checkbox": 1,
    "true": 1,
    "month": 1,
    "decision": 1,
    "simplified": 1,
    "defence": 1,
    "deliver": 3,
    "setting": 5,
    "blocking": 4,
    "response": 1,
    "copy": 1,
    "asset": 3,
    "maybe": 1,
    "server": 11,
    "concern": 1,
    "outcry": 1,
    "good": 2,
    "call": 6,
    "extend": 1,
    "friend": 11,
    "say": 2,
    "vulnerability": 9,
    "voice": 3,
    "talk": 1,
    "code": 5,
    "access": 1,
    "secure": 2,
    "way": 2,
    "send": 7,
    "public": 12,
    "look": 2,
    "describe": 1,
    "optional": 1,
    "able": 1,
    "would": 1,
    "impossible": 1,
    "realise": 1,
    "expose": 1,
    "target": 1,
    "sound": 1,
    "accept": 1,
    "argue": 2,
    "carefully": 1,
    "recent": 1,
    "deny": 2,
    "non": 2,
    "distinguish": 1,
    "scale": 1,
    "set": 1,
    "point": 2,
    "switch": 4,
    "despite": 1,
    "vulnerable": 1,
    "trust": 1,
    "correctly": 1,
    "check": 1,
    "concerned": 1,
    "time": 3,
    "increase": 2,
    "middle": 1,
    "fingerprint": 1,
    "carry": 1,
    "miss": 1,
    "actually": 1,
    "scalable": 1,
    "furthermore": 2,
    "associate": 1,
    "transparently": 1,
    "normal": 2,
    "lie": 1,
    "change": 5,
    "end": 4,
    "potentially": 2,
    "order": 2,
    "lose": 2,
    "particular": 1,
    "shady": 3,
    "later": 1,
    "false": 1,
    "offline": 1,
    "choice": 2,
    "instance": 1,
    "find": 2,
    "try": 1,
    "ask": 3,
    "sender": 4,
    "backdoor": 2,
    "pass": 1,
    "security": 5,
    "recipient": 3,
    "region": 1,
    "flaw": 3,
    "verify": 3,
    "key": 24,
    "definitely": 1,
    "forward": 1,
    "experience": 1,
    "fact": 1,
    "easy": 1,
    "whatsapp": 2,
    "one": 1,
    "central": 1,
    "smokescreen": 1,
    "specifically": 1,
    "complicated": 1,
    "malicious": 1,
    "receive": 5,
    "discretion": 1,
    "automatically": 5,
    "safety": 1,
    "privacy": 2,
    "enable": 5,
    "business": 3,
    "decide": 1,
    "retransmit": 3,
    "possible": 2,
    "deliberately": 1,
    "readable": 1,
    "blog": 1,
    "implementation": 1,
    "perfect": 1,
    "avoid": 1,
    "real": 3,
    "additional": 1,
    "available": 1,
    "facebook": 2,
    "use": 4,
    "deliberate": 2,
    "apps": 3,
    "leave": 1,
    "reason": 2,
    "tell": 3,
    "government": 3,
    "long": 2,
    "day": 1,
    "garbage": 2,
    "need": 3,
    "reproducible": 1,
    "discussion": 1,
    "store": 1,
    "single": 1,
    "statement": 1,
    "build": 1,
    "indistinguishable": 1,
    "occur": 2,
    "bad": 2,
    "happen": 1,
    "resent": 1,
    "big": 2,
    "identify": 1,
    "warning": 2,
    "reinstall": 2,
    "number": 2,
    "effectively": 1,
    "notification": 5,
    "length": 1,
    "revolve": 1,
    "resend": 2,
    "situation": 1,
    "download": 1,
    "encryption": 3,
    "allow": 2,
    "creator": 1,
    "hand": 1,
    "undelivered": 1,
    "usability": 2,
    "get": 3,
    "wiretap": 1,
    "work": 2,
    "technical": 1,
    "new": 10,
    "loophole": 1,
    "click": 1,
    "messenger": 1,
    "meantime": 1,
    "contain": 1,
    "right": 1,
    "message": 31,
    "hang": 1,
    "question": 1,
    "option": 2,
    "make": 2,
    "problem": 4,
    "instruct": 1,
    "display": 2,
    "personally": 1,
    "encrypt": 7,
    "source": 6,
    "discover": 1,
    "manner": 1,
    "instead": 3,
    "basically": 1,
    "affect": 2,
    "communication": 1,
    "messaging": 2,
    "large": 1,
    "highly": 1,
    "explain": 2,
    "plain": 1,
    "transit": 4,
    "pick": 1,
    "handle": 1,
    "demonstrate": 1,
    "issue": 1,
    "consider": 2,
    "conversation": 5,
    "belong": 2,
    "thing": 2,
    "freely": 1,
    "give": 4,
    "process": 1,
    "receipt": 1,
    "actual": 1
  },
  "tags": [
    "technology/whatsapp",
    "technology/technology",
    "technology/encryption",
    "world/privacy",
    "world/world",
    "technology/cybercrime",
    "technology/data-protection",
    "technology/internet",
    "technology/data-computer-security",
    "technology/facebook",
    "technology/chat-messaging-apps",
    "media/social-media",
    "media/socialnetworking"
  ],
  "content": "There was an outcry when the Guardian published my information regarding a vulnerability within WhatsApp's implementation of end-to-end encryption, but much of the response misses the point. Most of the arguments seem to revolve around what is and isn't a backdoor. You can argue that we are looking at a vulnerability which would be something that is there by error, or a backdoor, which would be something that is there deliberately. At the time I found the flaw, I didn't think it was deliberate, but since Facebook was informed in April 2016 and it still hasn't been fixed, now I'm not so sure. But this discussion is a smokescreen for the real problem. Facebook does not deny that there is a vulnerability that can be used to \"wiretap\" targeted conversations by, for example, governments with access to WhatsApp's servers. And despite WhatsApp's recent public statements, the vulnerability cannot be avoided by verifying fingerprints or checking a checkbox in the WhatsApp settings. The vulnerability in a nutshell In a simplified manner, encrypted messaging works using secret and public keys. Every user has both a secret key known only to them, and a public key. A user's public key can be used to encrypt messages which can then only be made readable again with the associated secret key. A difficult problem in secure communication is getting your friend's public keys. Apps such as WhatsApp and Signal make the process of getting those keys easy for you by storing them on their central servers and allowing your app to download the public keys of your contacts automatically. The problem here is that the WhatsApp server could potentially lie about the public keys. Instead of giving you your friend's key, it could give you a public key belonging to a third party, such as the government. That's why, if you don't trust WhatsApp, you would need to verify what they call the \"security\" code with your friends. This way you would be able to make sure the WhatsApp server really did give you your friend's key. Things get more complicated when you look at what happens if your friend changes his public key, for example, because he gets a new phone or reinstalls WhatsApp. Here the WhatsApp server gives you new public keys for your contacts. You should be notified when sent a friend's new public key, and given the option to validate again that this new key indeed belongs to your friend and not some other party. This behaviour is called \"blocking\". The problem with WhatsApp is that you are not given this option. Instead, your WhatsApp will automatically accept this new key and resend all \"in transit\" messages (those marked with only one tick), encrypted with the new, potentially malicious key. This behaviour is called \"non-blocking\". It does not sound too bad because it only affects \"in transit\" messages, but it is at the discretion of the WhatsApp server to decide which messages are \"in transit\" and which are not by passing the \"delivered\" message back to the sender. Furthermore, WhatsApp voice calls are also affected: when you call someone and during the time the call connects you receive a new key, your phone will just switch to this new key without alerting you. There is an optional setting in WhatsApp called \"show security notifications\". With this setting enabled, your phone will display you a warning when it receives new keys, but only after those \"in transit\" messages are already re-sent or you hang up the voice call. The user experience 'downgrade' we are talking about WhatsApp argues that this vulnerability is a \"design decision\" that increases usability by making sure messages are resent automatically without the need for the user to click a yes or no button. This is contested, but even if you believed that it would increase usability, that argument works only for messages, not for voice calls. For voice calls, for instance, if the recipient is offline then the call can't be picked up and you have to call again later. Signal chooses to handle key changes with blocking and so does not have this vulnerability, but WhatsApp chooses to go with non-blocking and therefore has it. So how are they different? How more difficult is Signal to use? Imagine you dump your phone into the ocean and only a month later you get a new phone and reinstall WhatsApp, changing your security key. During the month some friends might have sent you messages that stayed as undelivered. Using WhatsApp, your friend's phones are instructed to automatically re-encrypt and retransmit any messages that haven't been delivered. But they don't know if they are sending messages to you or the government. Then, and only if your friends specifically asked WhatsApp to do so, they will see a warning after delivering the messages that there could've been something shady going on. Signal on the other hand will tell your friends something like: \"There might've been something shady going on. Do you want to resend your message?\" But how often do those situations really occur? I'd say not that often. WhatsApp says \"millions of messages\", which is actually not such a big number considering users send and receive something in the region of 15tn (that's trillion) messages per year through its servers. Even if it does occur the messages aren't lost if you use blocking: your contacts are simply asked to send the message again. The other big question is whether it is really that much to ask for from the users to use blocking? With the \"show security features\" enabled, a user is basically telling WhatsApp: \"I'm especially concerned about my privacy and I know what I am doing. Please give me the best privacy possible\". However, even with this setting enabled, WhatsApp will still automatically re-encrypt and retransmit messages, leaving the sender vulnerable, only notifying the user of the key change after the fact. If someone is concerned enough to have the setting switched on surely WhatsApp should switch to blocking? In a blog post in defence of WhatsApp, one of the creators of the Signal end-to-end encryption protocol used by WhatsApp, Moxie Marlinspike, tries to explain why this choice has been made. He said: \"The choice to make these notifications 'blocking' would in some ways make things worse. That would leak information to the server about who has enabled safety number change notifications and who hasn't, effectively telling the server who it could man-in-the-middle transparently and who it couldn't; something that WhatsApp considered very carefully.\" This claim is false. Those \"blocking\" clients could instead retransmit a message of the same length that just contains garbage and this message would just not be displayed by the receiver's phone. Encryption guarantees the garbage or real messages are indistinguishable in the encrypted form. Hence, this technique would make identifying users with the additional security enabled on a large scale impossible. Only one message? There have been claims that only one single message is exposed before the sender notices that something shady might be going on. For technical reasons, only the case with one message can be demonstrated, but there is reason to believe the attack can be extended to a longer conversation. The Signal protocol allows \"lost or out-of-order messages\". Therefore it should be possible for the WhatsApp server to block all \"message has been received\" notifications from the recipient to the sender for a long conversation while it still correctly forwards the actual text messages. The \"receipt\" notifications, if encrypted at all, can be distinguished from the normal text messages because they are the ones sent directly after the recipient receives the message. The users would then only see one tick for all their messages, but many might not realise something isn't right because the messages would get through and the conversation would carry on as normal. After days, weeks or maybe even months, the described attack can then be launched in order to get a copy of the whole conversation since that point in time. What Facebook should do is fix the issue, and release the source code of its apps so that the public can verify the integrity of its messaging apps. Facebook's business asset is not the source code of the app; the source code of many apps with many of the same features is freely available already to competitors. Its real business asset is its massive, almost 2 billion-person user base. The source code of its highly scalable server infrastructure is also a true business asset but that part doesn't need to be open sourced. What can users do in the meantime? I personally use the Signal messenger. It is not perfect but the best I could find. It does not have this particular flaw and I don't know of any other flaws. Furthermore, it is open source and makes an effort towards reproducible builds. Users should definitely not switch to less secure systems such as SMS or other apps where it is well known that messages are transmitted in plain text."
}