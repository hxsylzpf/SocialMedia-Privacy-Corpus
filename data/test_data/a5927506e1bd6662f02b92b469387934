{
  "lead": "SSL vulnerability in iPhone, iPad and on Mac OS X appeared in September 2012 - but cause remains mysterious as former staffer calls lack of testing 'shameful'. By Charles Arthur",
  "id": "technology/2014/feb/25/apples-ssl-iphone-vulnerability-how-did-it-happen-and-what-next",
  "class": null,
  "title": "Apple's SSL iPhone vulnerability: how did it happen, and what next?",
  "core-words": {
    "subtle": 1,
    "site": 1,
    "change": 2,
    "git": 1,
    "software": 1,
    "engineer": 1,
    "nightmare": 1,
    "test": 3,
    "connection": 2,
    "fix": 2,
    "chrome": 1,
    "certainly": 1,
    "conflict": 2,
    "3gs": 1,
    "lack": 1,
    "flow": 1,
    "resolve": 1,
    "verify": 1,
    "ios": 6,
    "similar": 1,
    "include": 1,
    "deep": 1,
    "roll": 1,
    "policy": 1,
    "blame": 1,
    "note": 1,
    "update": 9,
    "apparently": 1,
    "mistake": 1,
    "cause": 2,
    "decide": 1,
    "shameful": 1,
    "know": 1,
    "agree": 1,
    "illogical": 1,
    "certificate": 2,
    "use": 3,
    "error": 1,
    "staffer": 2,
    "individual": 1,
    "work": 3,
    "tell": 1,
    "checkin": 1,
    "way": 1,
    "remain": 1,
    "individually": 1,
    "wo": 1,
    "touch": 1,
    "attempt": 1,
    "method": 1,
    "employee": 1,
    "happen": 2,
    "system": 1,
    "identify": 1,
    "iphone": 3,
    "bug": 2,
    "ipad": 2,
    "copy/paste": 1,
    "instead": 1,
    "library": 1,
    "company": 2,
    "say": 1,
    "website": 1,
    "nearly": 1,
    "unit": 1,
    "unnoticed": 1,
    "offer": 1,
    "code": 10,
    "call": 1,
    "secure": 1,
    "valid": 1,
    "new": 1,
    "team": 3,
    "basis": 1,
    "signature": 1,
    "management": 1,
    "wide": 1,
    "able": 2,
    "branch": 1,
    "repeat": 1,
    "chunk": 1,
    "singe": 1,
    "device": 4,
    "separate": 1,
    "mysterious": 1,
    "source": 1,
    "vulnerability": 3,
    "line": 1,
    "ipod": 1,
    "regression": 1,
    "security": 3,
    "testing": 3,
    "sort": 1,
    "urgent": 1,
    "commit": 2,
    "merge": 1,
    "track": 1,
    "browser": 1,
    "go": 1,
    "succeed": 1,
    "assign": 1,
    "issue": 2,
    "create": 2,
    "appear": 1,
    "shipping": 1,
    "hasn't": 1
  },
  "words": {
    "mean": 2,
    "rest": 1,
    "discover": 3,
    "cause": 2,
    "reserve": 1,
    "accidently": 1,
    "sooner?its": 1,
    "contact": 2,
    "single": 1,
    "compiler": 2,
    "team": 6,
    "possible": 1,
    "insert": 1,
    "ssl/tls": 2,
    "x": 1,
    "speculation": 2,
    "follow": 1,
    "internal": 1,
    "there?here": 1,
    "engineering": 2,
    "knee": 1,
    "professor": 1,
    "throw": 2,
    "believe": 2,
    "chip": 1,
    "strong": 2,
    "connect": 4,
    "roll": 3,
    "policy": 1,
    "zune": 1,
    "divergent": 1,
    "let": 2,
    "stupid": 1,
    "apple": 1,
    "think": 3,
    "appropriate": 1,
    "daylight": 1,
    "computer": 2,
    "people": 5,
    "update": 17,
    "installation": 1,
    "spark": 1,
    "os": 2,
    "relation": 1,
    "newly": 1,
    "coding": 2,
    "spot": 1,
    "bear": 1,
    "ugly": 1,
    "practice": 2,
    "bring": 1,
    "detail": 2,
    "instigate": 1,
    "publish": 3,
    "isrsa": 1,
    "aware": 1,
    "comfort": 1,
    "remote": 1,
    "spy": 1,
    "piece": 2,
    "idea": 1,
    "slip": 1,
    "ipod": 2,
    "diversion": 2,
    "importance": 1,
    "log": 1,
    "proceed": 1,
    "lie": 1,
    "touch": 2,
    "amp;signedparams": 1,
    "test": 6,
    "setting": 1,
    "diff": 2,
    "iphone": 5,
    "program": 1,
    "overly": 1,
    "common": 3,
    "wake": 1,
    "copy/paste": 1,
    "good": 4,
    "goto": 7,
    "nature": 1,
    "recently": 1,
    "authenticate": 2,
    "vulnerability": 9,
    "platform": 3,
    "smug": 1,
    "hit": 1,
    "code": 37,
    "rely": 1,
    "case": 1,
    "leave": 1,
    "chrome": 2,
    "basis": 2,
    "look": 2,
    "mac": 5,
    "come": 4,
    "repeat": 1,
    "merging": 2,
    "incredibly": 1,
    "programming": 2,
    "set": 2,
    "mysterious": 1,
    "government": 3,
    "release": 6,
    "patch": 4,
    "regression": 2,
    "password": 1,
    "doubt": 1,
    "occur": 1,
    "despite": 1,
    "default": 2,
    "trust": 3,
    "pernicious": 1,
    "flow": 1,
    "web": 1,
    "tend": 1,
    "create": 3,
    "egregious": 1,
    "middle": 1,
    "hijack": 2,
    "step": 1,
    "clang": 1,
    "continuously": 1,
    "desktop": 2,
    "actually": 1,
    "announce": 1,
    "site": 15,
    "launch": 1,
    "aside": 1,
    "hack": 2,
    "git": 1,
    "depend": 1,
    "instead": 1,
    "saving": 1,
    "situation": 1,
    "shallow": 1,
    "matter": 2,
    "unclear": 2,
    "find": 9,
    "programmer": 4,
    "birthday": 1,
    "pass": 2,
    "lack": 1,
    "database": 1,
    "flaw": 7,
    "peculiar": 1,
    "circumstance": 2,
    "amp;serverrandom": 1,
    "forge": 1,
    "fact": 4,
    "drive": 2,
    "easy": 3,
    "conspiracy": 3,
    "dangerously": 1,
    "deep": 1,
    "exploit": 6,
    "blame": 1,
    "show": 2,
    "malicious": 4,
    "resolve": 1,
    "sell": 3,
    "commit": 2,
    "suddenly": 1,
    "join": 1,
    "power": 1,
    "author": 1,
    "chain": 3,
    "editor": 2,
    "apply": 1,
    "decide": 1,
    "bunch": 1,
    "soon": 1,
    "know": 8,
    "live": 2,
    "system": 5,
    "return": 1,
    "collect": 1,
    "problem": 1,
    "flip": 1,
    "bool": 1,
    "lot": 1,
    "windows": 1,
    "available": 2,
    "clever": 1,
    "drop": 2,
    "addition": 1,
    "staffer": 4,
    "wrong": 2,
    "world": 1,
    "odd": 1,
    "singe": 1,
    "checkin": 1,
    "weakness": 1,
    "remain": 1,
    "ctx": 1,
    "lesson": 1,
    "possibility": 1,
    "attempt": 1,
    "check": 4,
    "activate": 1,
    "identify": 2,
    "opinion": 1,
    "number": 3,
    "feel": 2,
    "library": 1,
    "risk": 1,
    "extra": 1,
    "company": 6,
    "culture": 1,
    "reset": 1,
    "nearly": 1,
    "leap": 1,
    "man": 1,
    "agree": 1,
    "android": 1,
    "apps": 1,
    "quickly": 1,
    "individual": 1,
    "remove": 1,
    "argue": 2,
    "cautious": 1,
    "new": 4,
    "lurk": 1,
    "brick": 1,
    "signature": 3,
    "home": 1,
    "extremely": 1,
    "right": 2,
    "hang": 1,
    "failure": 1,
    "lead": 1,
    "obvious": 1,
    "bad": 1,
    "chunk": 1,
    "fast": 1,
    "display": 1,
    "garner": 1,
    "separate": 2,
    "sslhashsha1.final(&amp;hashctx": 1,
    "page": 1,
    "website": 4,
    "alarm": 1,
    "mobile": 1,
    "fix": 12,
    "hard": 1,
    "safari": 1,
    "urgent": 1,
    "standpoint": 1,
    "unleash": 1,
    "ensnare": 1,
    "gotofail.com": 3,
    "notably": 1,
    "completely": 1,
    "merge": 1,
    "brittle": 1,
    "carry": 2,
    "millisecond": 2,
    "go": 3,
    "succeed": 1,
    "alternative": 1,
    "handheld": 1,
    "issue": 8,
    "allow": 2,
    "appear?in": 1,
    "appear": 3,
    "admin": 2,
    "list": 1,
    "shipping": 1,
    "buddy": 1,
    "give": 3,
    "abound": 1,
    "generate": 1,
    "subtle": 1,
    "get": 1,
    "router": 1,
    "inside": 1,
    "fake": 1,
    "fault": 1,
    "difficult": 1,
    "engineer": 1,
    "user": 5,
    "static": 4,
    "nightmare": 1,
    "crack": 1,
    "regime": 1,
    "reject": 1,
    "dissident": 1,
    "message": 6,
    "decline": 1,
    "conflict": 3,
    "example": 2,
    "3gs": 1,
    "largely": 1,
    "valid": 2,
    "general": 1,
    "late": 2,
    "hasn't": 2,
    "loving": 1,
    "nefarious": 2,
    "ios": 20,
    "old": 2,
    "red": 2,
    "turn": 1,
    "perfectly": 1,
    "safe": 3,
    "segment": 2,
    "plant": 3,
    "hole": 3,
    "sslfreebuffer(&amp;signedhash": 1,
    "final": 1,
    "secret": 1,
    "wary": 1,
    "updated": 1,
    "aka": 1,
    "active": 1,
    "version": 9,
    "account": 1,
    "likely": 2,
    "machine": 1,
    "like": 4,
    "state": 1,
    "capture": 2,
    "thumb": 1,
    "attack": 2,
    "0day": 1,
    "flawed": 1,
    "surprise": 1,
    "uptime": 1,
    "f**k": 1,
    "uint8_t": 1,
    "precisely": 1,
    "connection": 5,
    "present": 3,
    "different": 1,
    "sore": 1,
    "blistering": 1,
    "yellow": 1,
    "hell": 1,
    "narrow": 1,
    "maliciously": 1,
    "individually": 1,
    "ssl": 1,
    "target": 1,
    "important": 2,
    "malware": 1,
    "fail": 9,
    "eye": 1,
    "particular": 1,
    "ipad": 3,
    "option": 1,
    "cryptographic": 1,
    "authority": 6,
    "accident": 1,
    "theory": 3,
    "say": 5,
    "purpose": 1,
    "error": 7,
    "epic": 1,
    "foul": 1,
    "green": 3,
    "consistency/integrity": 1,
    "sort": 1,
    "secure": 5,
    "way": 3,
    "base": 1,
    "send": 1,
    "public": 2,
    "plan": 2,
    "developer": 2,
    "register": 2,
    "reporting": 1,
    "wide": 1,
    "reconcile": 1,
    "able": 3,
    "would": 2,
    "branch": 3,
    "gmail.com": 1,
    "codebase": 1,
    "begin": 1,
    "expect": 1,
    "effort": 1,
    "year": 1,
    "difference": 2,
    "device": 11,
    "type": 1,
    "bomb": 1,
    "activex": 1,
    "line": 8,
    "wild": 1,
    "dollar": 1,
    "protect": 1,
    "keep": 1,
    "pretend": 2,
    "match": 2,
    "vulnerable": 4,
    "seriously": 2,
    "pc": 1,
    "track": 1,
    "tell": 5,
    "correctly": 1,
    "method": 2,
    "assign": 1,
    "point": 8,
    "essential": 1,
    "bug?it": 1,
    "charge": 1,
    "run": 5,
    "inspire": 1,
    "minimal": 1,
    "start": 1,
    "flag": 1,
    "operate": 1,
    "measure": 1,
    "age": 1,
    "change": 6,
    "date": 3,
    "ie": 1,
    "researcher": 1,
    "lose": 1,
    "faster": 1,
    "illogical": 1,
    "development": 1,
    "amp;hashout": 1,
    "layer/transport": 1,
    "equivalent": 1,
    "subvert": 2,
    "browser": 5,
    "want": 1,
    "certainly": 3,
    "-&gt": 2,
    "backdoor": 1,
    "increment": 1,
    "security": 11,
    "take": 2,
    "bug?early": 1,
    "verify": 2,
    "software": 12,
    "key": 2,
    "refer": 1,
    "forward": 1,
    "unlikely": 2,
    "similar": 3,
    "include": 3,
    "ahead": 1,
    "quality": 1,
    "word": 1,
    "prevent": 2,
    "early": 2,
    "timer": 1,
    "note": 3,
    "analysis": 3,
    "automatically": 1,
    "review": 2,
    "write": 1,
    "apparently": 2,
    "revelation": 1,
    "organisation": 1,
    "clear": 2,
    "reboot": 1,
    "shameful": 2,
    "catch": 2,
    "see": 1,
    "blog": 1,
    "sslhashsha1.update(&amp;hashctx": 2,
    "add": 5,
    "beta": 2,
    "beneath": 1,
    "invalid": 1,
    "use": 13,
    "suggest": 1,
    "work": 9,
    "positive": 1,
    "guide": 1,
    "long": 1,
    "specifically": 1,
    "offer": 1,
    "day": 3,
    "professional": 1,
    "nation": 1,
    "door": 1,
    "wo": 3,
    "false": 1,
    "explanation": 1,
    "statement": 1,
    "socket": 1,
    "confirm": 1,
    "reckon": 1,
    "employee": 1,
    "happen": 3,
    "open": 3,
    "testing": 8,
    "certificate": 19,
    "codebas": 1,
    "bug": 18,
    "faulty": 1,
    "internet": 1,
    "tree": 1,
    "fall": 1,
    "subsidiary": 1,
    "hope": 1,
    "shuffle": 1,
    "whomever": 1,
    "unit": 2,
    "encryption": 1,
    "comment": 1,
    "normal": 2,
    "hand": 1,
    "claim": 1,
    "delay": 1,
    "call": 2,
    "source": 2,
    "sslverifysignedserverkeyexchange(sslcontext": 1,
    "osstatus": 2,
    "surprisingly": 1,
    "id": 1,
    "management": 1,
    "core": 1,
    "install": 1,
    "and/or": 1,
    "stand": 2,
    "question": 2,
    "adjust": 1,
    "osx": 3,
    "sit": 1,
    "discovery": 1,
    "raise": 1,
    "err": 5,
    "january": 1,
    "dogfood": 1,
    "approve": 1,
    "unreachable": 2,
    "hacker": 1,
    "verifies": 1,
    "mistake": 9,
    "reduce": 1,
    "affect": 3,
    "communication": 1,
    "put": 1,
    "datum": 2,
    "product": 1,
    "inject": 1,
    "login": 3,
    "unnoticed": 1,
    "time": 7,
    "warning": 5,
    "app": 1,
    "area": 1,
    "major": 1,
    "encrypt": 2,
    "introduce": 2,
    "luck": 1,
    "process": 3
  },
  "tags": [
    "technology/apple",
    "technology/hacking",
    "technology/computing",
    "technology/software",
    "technology/internet",
    "technology/data-computer-security",
    "technology/iphone",
    "technology/ipad",
    "technology/ipad-mini",
    "technology/technology"
  ],
  "content": "Apple has issued an urgent fix for a vulnerability in its SSL (Secure Sockets Layer) code, used to create secure connections to websites over Wi-Fi or other connections, for its iPhone, iPad and iPod Touch devices. The fix, which is available now for both iOS 6 and iOS 7, is for a flaw which appears to have been introduced in a code change made ahead of the launch of iOS 6.0. The flaw also affects Mac computers running Mac OSX - for which there's no fix announced yet, although Apple says one is \"coming soon\". Update: the fix is included in OSX 10.9.2, which became available on Tuesday. There is also an update for Mountain Lion, though it's not clear why as that wasn't thought to be affected. The bug, and its discovery, raise a number of questions. Here's what we do know, what we don't know, and what we hope to know. (Apple declined to comment in relation to a number of questions we put about the vulnerability.) How can I check whether I'm vulnerable? Go to gotofail.com and see what message you get. If all is good you'll get a green message. On an iOS device, you'll get a warning to update. If you're on a Mac, you'll either get a green message (your system is safe) or a yellow message (in a safe browser pointing out that other apps could be vulnerable) or a red message (telling you to patch your browser). What should I do? If you use an iPhone, iPad or iPod Touch, update its operating software. Go to Settings -&gt; General -&gt; Software Update. For devices using iOS 7, update to iOS 7.0.6; for devices on iOS 6 which can't be updated to iOS 7 (the iPhone 3GS or iPod Touch 4G), update to 6.1.6. Note that Apple isn't offering an update to iOS 6 for devices which can be updated to iOS 7 (iPhone 4, iPad 2, etc). For those, your only options are to update, or live dangerously. If you're using a Mac on an older OS version, ie 10.8 (\"Mountain Lion\") or earlier, you're safe. If you're using a Mac on the newest OS, 10.9 (aka \"Mavericks\"), don't use Safari to connect to secure websites until there's an update. Use Mozilla's Firefox or Google's Chrome: they use their own code for connecting to secure websites. No bug has been found in that. What did the bug do? In theory (and perhaps, depending on who knew about it, in practice) it could allow your connections to secure sites to be spied on and/or your login details captured. Updating the software prevents that. The bug affected the SSL/TLS encrypted connection to remote sites. What's the importance of SSL/TLS? When your device (handheld or PC) connects to a website using the SSL/TLS (Secure Sockets Layer/Transport Layer Security) method, the site presents a cryptographic \"certificate\" chain identifying itself and the authority which issued the certificate. Your device already has a list of issuing authorities which are trusted, and it will check the name of the site and the certificate it presents with that authority. It's a four-step process: \u2022 Site presents certificate chain \u2022 Your device checks site's certificate matches name of site you're on \u2022 Your device verifies that certificate comes from valid issuing authority \u2022 Your browser verifies that certificate chain signature matches the site's public key. (There's also a guide to how it works at the gotofail.com FAQ.) In theory, a certificate that has the wrong name for the site, or which hasn't been issued by the authority, or which is out of date, won't be trusted. At this point you'll get a warning in your browser telling you that there's something wrong and that you shouldn't proceed or your data could be at risk. A faked certificate could mean that the site you're connecting to is actually being run by someone who wants to collect your user login details - as has happened in Iran. In 2011 the government there is reckoned to have used a certificate issued from a subverted certificated authority to set up a site which (through DNS diversion) could pretend to be Google's gmail.com - and captured the data from dissidents who thought they were logging into the site. So it's important that your device can authenticate SSL certificates correctly. Sometimes you will come across sites where you get a certificate warning but which say you should trust it (for example because it's a subsidiary with a different name from the one which owns the certificate). Be wary. Don't approve certificates without being cautious. What was the bug? Due to a singe repeated line of code in an Apple library, almost any attempt to verify a certificate on a site would succeed - whether or not the certificate's signature was valid. It would only throw an error if the certificate itself was invalid (due to being out of date, for example). The bug is in the code below: it's the second \"goto fail;\", and would be carried out in every circumstance. static OSStatus SSLVerifySignedServerKeyExchange(SSLContext *ctx, bool isRsa, SSLBuffer signedParams, uint8_t *signature, UInt16 signatureLen) { OSStatus err; ... if ((err = SSLHashSHA1.update(&amp;hashCtx, &amp;serverRandom)) != 0) goto fail; if ((err = SSLHashSHA1.update(&amp;hashCtx, &amp;signedParams)) != 0) goto fail; goto fail; if ((err = SSLHashSHA1.final(&amp;hashCtx, &amp;hashOut)) != 0) goto fail; ... fail: SSLFreeBuffer(&amp;signedHashes); SSLFreeBuffer(&amp;hashCtx); return err; } When did the bug appear?In iOS 6.0, which went public in September 2012. It's not yet clear precisely when the error appeared in Mac OSX, but it's likely to be at the same time, since the mobile and desktop OSs use common code trees. The bug wasn't there in the final version of iOS 5, 5.1.1, released in May 2012. The same code has apparently been carried forward through into iOS 7 and Mac OSX 10.9; it's even in the latest versions of iOS 7.1, which is still in beta. The diff of the two code versions shows the addition of the extra statement at line 62: (The red lines are removed in the updated code; the green lines are added.) It's not an obvious difference unless you're looking for it; in that case, it stands out like a sore thumb to any programmer. How did the bug get there?Here we have two divergent theories: accident or conspiracy. Either it's a stupid mistake inside Apple, or it's a nefarious plan by the NSA (or others?) to ensnare targets' communications by planting a back door in a key piece of code. Arguing against the conspiracy plan is the fact that Apple publishes this code on its open source page. On the basis that \"many eyes make bugs shallow\", and that the whole internet has been able to look at this epic \"goto fail\" for ages. If the NSA puts its secret backdoors out in the open like this, you'd expect them to be found a lot faster. Arguing for nefarious conspiracy is - well, not very much. Apple should have found it, but didn't; either of its compilers (GCC and Clang) should have thrown an error, but testing by others has shown that it doesn't unless you have a particular warning flag (for \"unreachable code\") set. A compiler which pointed to \"unreachable code\" (that is, a segment of code which will never be activated because it lies beneath a code diversion that always applies) would have caught it. One former Apple staffer who worked on Mac OSX told the Guardian it's \"extremely unlikely, at least under normal circumstances\" that the flaw was added maliciously. \"There are very few people on any given team at Apple, and so getting changes lost in the shuffle would be difficult. The flip side is that there aren't strong internal consistency/integrity checks on the codebase, so if someone were clever enough to subvert normal processes there would be easy ways in.\" But, the programmer added, \"this change does not specifically stand out as malicious in nature.\" The way it almost certainly happened is that it was a copy/paste error, or a merge issue (between two branches of code) that went unnoticed - \"two similar changes could cause a conflict\" (where the code has an illogical flow) \"and in resolving this conflict an engineer might have made a mistake.\" What do programmers say? One former Apple employee who worked on Mac OSX, including shipping updates and security updates, told the Guardian that Apple will be able to identify who did the code checkin which created the bug. \"While source code management is on a team-by-team basis (there's no company-wide policy), nearly every team uses some system (Git or SVN) that would be able to track commits [changes to code which are \"committed\" for use] and assign blame.\" The most likely explanation is that it occurred through the merging of two branches of code (where two or more people were working on the segment of code). Code merging is completely common in professional programming; reconciling conflicts between separate branches tends to be done by hand, using editors which will show up \"diffs\" (differences) between the old, new, and alternative new code. Adam Langley, who works on security for Google's Chrome browser (but hasn't worked for Apple), says: This sort of subtle bug deep in the code is a nightmare. I believe that it's just a mistake and I feel very bad for whomever might have slipped in an editor and created it. The author of the gotofail.com site thinks otherwise: It is hard for me to believe that the second \"goto fail;\" was inserted accidently given that there were no other changes within a few lines of it. In my opinion, the bug is too easy to exploit for it to have been an NSA plant. My speculation is that someone put it in on purpose so they (or their buddy) could sell it. (By \"sell\" he's referring to the fact that you can now sell \"zero-day exploits\" to nation states and security companies - garnering up to half a million dollars or perhaps more.) The fact that Apple is fixing the hole now suggests that it isn't NSA-inspired. Though as John Gruber has pointed out, it's perfectly possible that the NSA discovered this hole when iOS 6 was released and knew that it could exploit it. One peculiar fact: if the NSA was aware of this security hole, it doesn't seem to have told the US Department of Defense, which passed iOS 6 for use in government in May 2013. When did Apple find the bug?Early in January. On 8 January it contacted CVE, the Common Vulnerabilities and Errors database (used by all the major software developers) to reserve the bug number CVE 2014-1266 for the newly-discovered vulnerability, though CVE didn't know what the vulnerability was. Apple seems then to have begun working on the fix and how to roll it out. What's odd is that despite finding the vulnerability then, it didn't fix it in two beta versions of iOS 7.1 that were released after that time. One possibility - though the company won't confirm this - is that it discovered the failure to authenticate the certificate in January, but took until now to narrow down the faulty piece of code - although given how quickly it took the rest of the web to do the same (a matter of a few hours) this seems unlikely. Why didn't Apple spot the bug sooner?Its tests didn't find it. The company won't say what methods it uses - whether unit testing (in which individual chunks of code are tested individually) or regression testing where the new code is tested against known tests. The former programmer there says \"Apple does not have a strong culture of testing or test-driven development. Apple relies overly on 'dogfooding' [using its own products] for quality processes, which in security situations is not appropriate. \"From a good software engineering standpoint, this type of issue should have been found. It is shameful they are not running static code analysis at all (let alone automatically) on such important codebases.\" The problem with static code analysis is that it can generate false positives - warnings about faults which aren't - which led to several teams rejecting the idea, though it's unclear whether the Security team was one of them. How did Apple find the bug?It seems to have been from a line-by-line review of code, almost certainly sparked by the revelations published by the Guardian of the NSA's Prism efforts - and its other claims to have cracked SSL. At one point there was speculation that the code review was instigated by Kristin Paget, who was until recently in charge of Apple's core OS X security, having joined in September 2012. But Paget (who has just started working for Tesla) has unleashed a blistering attack on Apple on her blog for releasing the fix for iOS but not also patching the desktop at the same time: WHAT THE EVER LOVING F**K, APPLE??!?!! Did you seriously just use one of your platforms to drop an SSL 0day on your other platform? As I sit here on my mac I'm vulnerable to this and there's nothing I can do, because you couldn't release a patch for both platforms at the same time? You do know there's a bunch of live, working exploits for this out in the wild right now, right? As she points out, Apple's own security update system uses SSL - so might that be hacked by a \"man in the middle\" attack to plant malware? How about your update system itself \u2013 is that vulnerable? Come the hell on, Apple. You just dropped an ugly 0day [zero-day vulnerability] on us and then went home for the weekend \u2013 goto fail indeed. FIX. YOUR. SHIT. Why didn't Apple fix the bug for Mac OSX at the same time as it did for iOS? It certainly should have, as Paget points out. Another former Apple staffer agrees; apparently Apple decided instead to roll out the fix for Mavericks as part of its 10.9.2 software update rather than as a separate security update (which it has done before). But other bugs were found in 10.9.2, delaying its release - and reducing the security of Mac users. (As noted above, the fix for OSX was rolled out on Tuesday, four days after that for iOS.) Have there been mistakes like this before? Mistakes abound in software - and encryption mistakes are surprisingly easy to make. In May 2011, a security researcher pointed out that WhatsApp user accounts could be hijacked because they weren't encrypted at all; until September 2011, there was a flaw in the same app which let people send forged messages pretending to be from anyone. A common mistake is the use of default logins which are left active: millions of routers around the world have default user IDs and passwords (often \"admin\" and \"admin\") which can be exploited by hackers. A similar coding mistake bricked Microsoft's Zune on the last day of 2008 - which, as luck would have it, was a leap year. There was a coding mistake in the software for the timer chip which wouldn't allow it to display a date equivalent to the 366th day of the year. Apple has also made some similar egregious errors - notably in having alarms which didn't adjust when daylight savings time did, and so kept waking people up either an hour early or late. Google too had an error in version 4.2.0 of its Android software: you couldn't add the birthdays of people born in December to their contacts, because that month wasn't included. More seriously, versions of Google's Android up to version 4.2 could see connections made over open Wi-Fi hijacked and malicious code injected, UK-based MWR Labs said in September 2013. It's unclear whether that has yet been patched; millions of Android devices are still using versions below 4.2. Ars Technica, reporting that flaw, noted that \"while the weakness can largely be prevented in Android 4.2, users are protected only if developers of each app follow best practices.\" And Microsoft had a long-running flaw in Windows 95 and Windows 98 which meant that if your computer had been running continuously for just under 50 days, it would suddenly hang - and you'd have to reboot it. Why? Because it measured \"uptime\" using a 32-bit register, which incremented every millisecond. After 2^32 milliseconds (aka 49 days and 17 hours), the register was all 1s - and the only way to reset it was turning the power off. That's quite aside from the many flaws exploited in its ActiveX software to install malicious programs on Windows machines in so-called \"drive-by installations\". What lessons are there from this? In the words of Arie Van Deursen, professor in software engineering at Delft University of Technology in the Netherlands, When first seeing this code, I was once again caught by how incredibly brittle programming is. Just adding a single line of code can bring a system to its knees. Not only that - but the flawed code has been both used and published for 18 months, and tested by a government security organisation which passed it for use. Software bugs can be pernicious - and they can lurk in the most essential areas. And even companies which have been writing software for decades can fall foul of them. But the former staffer at Apple says that unless the company introduces better testing regimes - static code analysis, unit testing, regression testing - \"I'm not surprised by this\u2026 it will only be a matter of time until another bomb like this hits.\" The only - minimal - comfort: \"I doubt it is malicious.\" \u2022 Feeling smug that your iPhone can't be hacked? Not so fast..."
}